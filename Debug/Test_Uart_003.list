
Test_Uart_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b2c  08002b2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b34  08002b34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08002b48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002b48  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac83  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c5  00000000  00000000  0002acb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158ad  00000000  00000000  0002d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6d0  00000000  00000000  00042ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008861c  00000000  00000000  0004d5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5bd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c4c  00000000  00000000  000d5c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002a8c 	.word	0x08002a8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002a8c 	.word	0x08002a8c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa44 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f828 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8f0 	bl	800080c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800062c:	f000 f86c 	bl	8000708 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f8b8 	bl	80007a4 <MX_USART2_UART_Init>
  {
      //uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) tx , sizeof ( rx ) , UART_TX_TIMEOUT ) ;
      //uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) rx , sizeof ( tx ) , UART_TX_TIMEOUT ) ;

      //uint16_t s = sizeof ( rx ) ;
      uart_status = HAL_UART_Receive ( &huart2 , (uint8_t *) rx , sizeof ( rx ) , UART_RX_TIMEOUT ) ;
 8000634:	23fa      	movs	r3, #250	; 0xfa
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	490b      	ldr	r1, [pc, #44]	; (8000668 <main+0x4c>)
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <main+0x50>)
 800063c:	2205      	movs	r2, #5
 800063e:	f001 fbb3 	bl	8001da8 <HAL_UART_Receive>
 8000642:	0003      	movs	r3, r0
 8000644:	001a      	movs	r2, r3
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <main+0x54>)
 8000648:	701a      	strb	r2, [r3, #0]
      // The UART hardware has a receive buffer of one character.
      if ( rx[0] != 0 )
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <main+0x4c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f0      	beq.n	8000634 <main+0x18>
      {
          strcpy ( tx , rx ) ;
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <main+0x4c>)
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <main+0x58>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f002 fa0f 	bl	8002a7c <strcpy>
          rx[0] = 0 ;
 800065e:	4b02      	ldr	r3, [pc, #8]	; (8000668 <main+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
      uart_status = HAL_UART_Receive ( &huart2 , (uint8_t *) rx , sizeof ( rx ) , UART_RX_TIMEOUT ) ;
 8000664:	e7e6      	b.n	8000634 <main+0x18>
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	2000015c 	.word	0x2000015c
 800066c:	200000bc 	.word	0x200000bc
 8000670:	20000150 	.word	0x20000150
 8000674:	20000154 	.word	0x20000154

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b093      	sub	sp, #76	; 0x4c
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	2410      	movs	r4, #16
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2338      	movs	r3, #56	; 0x38
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f002 f9ef 	bl	8002a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	003b      	movs	r3, r7
 8000690:	0018      	movs	r0, r3
 8000692:	2310      	movs	r3, #16
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f002 f9e8 	bl	8002a6c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fca1 	bl	8000fe8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2202      	movs	r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	0052      	lsls	r2, r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2240      	movs	r2, #64	; 0x40
 80006be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fcd9 	bl	8001080 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006d2:	f000 f8b1 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	003b      	movs	r3, r7
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	003b      	movs	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ee:	003b      	movs	r3, r7
 80006f0:	2100      	movs	r1, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 ffde 	bl	80016b4 <HAL_RCC_ClockConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006fc:	f000 f89c 	bl	8000838 <Error_Handler>
  }
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b013      	add	sp, #76	; 0x4c
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_USART1_UART_Init+0x94>)
 800070e:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <MX_USART1_UART_Init+0x98>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000714:	22e1      	movs	r2, #225	; 0xe1
 8000716:	0252      	lsls	r2, r2, #9
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_USART1_UART_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_USART1_UART_Init+0x94>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_USART1_UART_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART1_UART_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 fad2 	bl	8001cfc <HAL_UART_Init>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800075c:	f000 f86c 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000762:	2100      	movs	r1, #0
 8000764:	0018      	movs	r0, r3
 8000766:	f002 f87d 	bl	8002864 <HAL_UARTEx_SetTxFifoThreshold>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800076e:	f000 f863 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f002 f8b4 	bl	80028e4 <HAL_UARTEx_SetRxFifoThreshold>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000780:	f000 f85a 	bl	8000838 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_USART1_UART_Init+0x94>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 f832 	bl	80027f0 <HAL_UARTEx_DisableFifoMode>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000790:	f000 f852 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000028 	.word	0x20000028
 80007a0:	40013800 	.word	0x40013800

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_USART2_UART_Init+0x64>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007b0:	22e1      	movs	r2, #225	; 0xe1
 80007b2:	0252      	lsls	r2, r2, #9
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 fa84 	bl	8001cfc <HAL_UART_Init>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f81e 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	200000bc 	.word	0x200000bc
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_GPIO_Init+0x28>)
 8000814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_GPIO_Init+0x28>)
 8000818:	2101      	movs	r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <MX_GPIO_Init+0x28>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40021000 	.word	0x40021000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x44>)
 800084c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_MspInit+0x44>)
 8000850:	2101      	movs	r1, #1
 8000852:	430a      	orrs	r2, r1
 8000854:	641a      	str	r2, [r3, #64]	; 0x40
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x44>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x44>)
 8000864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x44>)
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	0549      	lsls	r1, r1, #21
 800086c:	430a      	orrs	r2, r1
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_MspInit+0x44>)
 8000872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	055b      	lsls	r3, r3, #21
 8000878:	4013      	ands	r3, r2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b097      	sub	sp, #92	; 0x5c
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	2344      	movs	r3, #68	; 0x44
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f002 f8e4 	bl	8002a6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	241c      	movs	r4, #28
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2328      	movs	r3, #40	; 0x28
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f002 f8dc 	bl	8002a6c <memset>
  if(huart->Instance==USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a56      	ldr	r2, [pc, #344]	; (8000a14 <HAL_UART_MspInit+0x188>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d159      	bne.n	8000972 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f89b 	bl	8001a08 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008d6:	f7ff ffaf 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008da:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 80008dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	01c9      	lsls	r1, r1, #7
 80008e4:	430a      	orrs	r2, r1
 80008e6:	641a      	str	r2, [r3, #64]	; 0x40
 80008e8:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 80008ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	01db      	lsls	r3, r3, #7
 80008f0:	4013      	ands	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fa:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
 8000902:	4b45      	ldr	r3, [pc, #276]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 8000904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000906:	2201      	movs	r2, #1
 8000908:	4013      	ands	r3, r2
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800090e:	2144      	movs	r1, #68	; 0x44
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	000c      	movs	r4, r1
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2201      	movs	r2, #1
 8000930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	193a      	adds	r2, r7, r4
 8000934:	23a0      	movs	r3, #160	; 0xa0
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f9f0 	bl	8000d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000940:	0021      	movs	r1, r4
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	00d2      	lsls	r2, r2, #3
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2202      	movs	r2, #2
 800094e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2201      	movs	r2, #1
 8000954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	187a      	adds	r2, r7, r1
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f9d8 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000970:	e04c      	b.n	8000a0c <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <HAL_UART_MspInit+0x190>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d147      	bne.n	8000a0c <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART2_CLK_ENABLE();
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 800097e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	0289      	lsls	r1, r1, #10
 8000986:	430a      	orrs	r2, r1
 8000988:	63da      	str	r2, [r3, #60]	; 0x3c
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 800098c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	029b      	lsls	r3, r3, #10
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 800099a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 800099e:	2101      	movs	r1, #1
 80009a0:	430a      	orrs	r2, r1
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_UART_MspInit+0x18c>)
 80009a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a8:	2201      	movs	r2, #1
 80009aa:	4013      	ands	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b0:	2444      	movs	r4, #68	; 0x44
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2204      	movs	r2, #4
 80009b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2202      	movs	r2, #2
 80009bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2201      	movs	r2, #1
 80009ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	193a      	adds	r2, r7, r4
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 f9a1 	bl	8000d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2208      	movs	r2, #8
 80009e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	187a      	adds	r2, r7, r1
 8000a00:	23a0      	movs	r3, #160	; 0xa0
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f98a 	bl	8000d20 <HAL_GPIO_Init>
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b017      	add	sp, #92	; 0x5c
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	40013800 	.word	0x40013800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40004400 	.word	0x40004400

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f89c 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a5c:	f7ff fff7 	bl	8000a4e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a86:	f001 ffcd 	bl	8002a24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a8a:	f7ff fdc7 	bl	800061c <main>

08000a8e <LoopForever>:

LoopForever:
  b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   r0, =_estack
 8000a90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a9c:	08002b3c 	.word	0x08002b3c
  ldr r2, =_sbss
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa4:	20000168 	.word	0x20000168

08000aa8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_IRQHandler>
	...

08000aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x3c>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_Init+0x3c>)
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	0049      	lsls	r1, r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f000 f810 	bl	8000aec <HAL_InitTick>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e001      	b.n	8000adc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff feb4 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_InitTick+0x88>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d02b      	beq.n	8000b5c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_InitTick+0x8c>)
 8000b06:	681c      	ldr	r4, [r3, #0]
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_InitTick+0x88>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	23fa      	movs	r3, #250	; 0xfa
 8000b10:	0098      	lsls	r0, r3, #2
 8000b12:	f7ff faf7 	bl	8000104 <__udivsi3>
 8000b16:	0003      	movs	r3, r0
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f7ff faf2 	bl	8000104 <__udivsi3>
 8000b20:	0003      	movs	r3, r0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f8ef 	bl	8000d06 <HAL_SYSTICK_Config>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d112      	bne.n	8000b52 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d80a      	bhi.n	8000b48 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2301      	movs	r3, #1
 8000b36:	425b      	negs	r3, r3
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f8ce 	bl	8000cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_InitTick+0x90>)
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e00d      	b.n	8000b64 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b48:	230f      	movs	r3, #15
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e008      	b.n	8000b64 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b52:	230f      	movs	r3, #15
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e003      	b.n	8000b64 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b64:	230f      	movs	r3, #15
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	781b      	ldrb	r3, [r3, #0]
}
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b005      	add	sp, #20
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	001a      	movs	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	18d2      	adds	r2, r2, r3
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000164 	.word	0x20000164

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20000164 	.word	0x20000164

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b7f      	cmp	r3, #127	; 0x7f
 8000bcc:	d828      	bhi.n	8000c20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <__NVIC_SetPriority+0xd4>)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	33c0      	adds	r3, #192	; 0xc0
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	589b      	ldr	r3, [r3, r2]
 8000bde:	1dfa      	adds	r2, r7, #7
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0011      	movs	r1, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	400a      	ands	r2, r1
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	21ff      	movs	r1, #255	; 0xff
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	2303      	movs	r3, #3
 8000c06:	4003      	ands	r3, r0
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <__NVIC_SetPriority+0xd4>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	430a      	orrs	r2, r1
 8000c18:	33c0      	adds	r3, #192	; 0xc0
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c1e:	e031      	b.n	8000c84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c20:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <__NVIC_SetPriority+0xd8>)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0019      	movs	r1, r3
 8000c28:	230f      	movs	r3, #15
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3306      	adds	r3, #6
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	3304      	adds	r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1dfa      	adds	r2, r7, #7
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	0011      	movs	r1, r2
 8000c40:	2203      	movs	r2, #3
 8000c42:	400a      	ands	r2, r1
 8000c44:	00d2      	lsls	r2, r2, #3
 8000c46:	21ff      	movs	r1, #255	; 0xff
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	43d2      	mvns	r2, r2
 8000c4e:	401a      	ands	r2, r3
 8000c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	22ff      	movs	r2, #255	; 0xff
 8000c58:	401a      	ands	r2, r3
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2303      	movs	r3, #3
 8000c62:	4003      	ands	r3, r0
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <__NVIC_SetPriority+0xd8>)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	001c      	movs	r4, r3
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	3b08      	subs	r3, #8
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	3306      	adds	r3, #6
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	18c3      	adds	r3, r0, r3
 8000c80:	3304      	adds	r3, #4
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b003      	add	sp, #12
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	045b      	lsls	r3, r3, #17
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d301      	bcc.n	8000cac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e010      	b.n	8000cce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <SysTick_Config+0x44>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	2103      	movs	r1, #3
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff ff7c 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x44>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x44>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	1c02      	adds	r2, r0, #0
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ffbf 	bl	8000c94 <SysTick_Config>
 8000d16:	0003      	movs	r3, r0
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	e147      	b.n	8000fc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d100      	bne.n	8000d48 <HAL_GPIO_Init+0x28>
 8000d46:	e138      	b.n	8000fba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d005      	beq.n	8000d60 <HAL_GPIO_Init+0x40>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d130      	bne.n	8000dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	43da      	mvns	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	409a      	lsls	r2, r3
 8000d82:	0013      	movs	r3, r2
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d96:	2201      	movs	r2, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	2201      	movs	r2, #1
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d017      	beq.n	8000dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2203      	movs	r2, #3
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d123      	bne.n	8000e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	58d3      	ldr	r3, [r2, r3]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	691a      	ldr	r2, [r3, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2107      	movs	r1, #7
 8000e36:	400b      	ands	r3, r1
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	6939      	ldr	r1, [r7, #16]
 8000e50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	401a      	ands	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	23c0      	movs	r3, #192	; 0xc0
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d100      	bne.n	8000e94 <HAL_GPIO_Init+0x174>
 8000e92:	e092      	b.n	8000fba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e94:	4a50      	ldr	r2, [pc, #320]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3318      	adds	r3, #24
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	589b      	ldr	r3, [r3, r2]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	220f      	movs	r2, #15
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	23a0      	movs	r3, #160	; 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x1ca>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a45      	ldr	r2, [pc, #276]	; (8000fdc <HAL_GPIO_Init+0x2bc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x1c6>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a44      	ldr	r2, [pc, #272]	; (8000fe0 <HAL_GPIO_Init+0x2c0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x1c2>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a43      	ldr	r2, [pc, #268]	; (8000fe4 <HAL_GPIO_Init+0x2c4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x1be>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x1cc>
 8000ede:	2305      	movs	r3, #5
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x1cc>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x1cc>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x1cc>
 8000eea:	2300      	movs	r3, #0
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	2103      	movs	r1, #3
 8000ef0:	400a      	ands	r2, r1
 8000ef2:	00d2      	lsls	r2, r2, #3
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000efc:	4936      	ldr	r1, [pc, #216]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3318      	adds	r3, #24
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	035b      	lsls	r3, r3, #13
 8000f22:	4013      	ands	r3, r2
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	039b      	lsls	r3, r3, #14
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f60:	2384      	movs	r3, #132	; 0x84
 8000f62:	58d3      	ldr	r3, [r2, r3]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	029b      	lsls	r3, r3, #10
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f84:	4914      	ldr	r1, [pc, #80]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f86:	2284      	movs	r2, #132	; 0x84
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	58d3      	ldr	r3, [r2, r3]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	025b      	lsls	r3, r3, #9
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb2:	4909      	ldr	r1, [pc, #36]	; (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	40da      	lsrs	r2, r3
 8000fc8:	1e13      	subs	r3, r2, #0
 8000fca:	d000      	beq.n	8000fce <HAL_GPIO_Init+0x2ae>
 8000fcc:	e6b0      	b.n	8000d30 <HAL_GPIO_Init+0x10>
  }
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b006      	add	sp, #24
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	50000400 	.word	0x50000400
 8000fe0:	50000800 	.word	0x50000800
 8000fe4:	50000c00 	.word	0x50000c00

08000fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	429a      	cmp	r2, r3
 800100a:	d11f      	bne.n	800104c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	0013      	movs	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	189b      	adds	r3, r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4912      	ldr	r1, [pc, #72]	; (8001064 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff f872 	bl	8000104 <__udivsi3>
 8001020:	0003      	movs	r3, r0
 8001022:	3301      	adds	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001026:	e008      	b.n	800103a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e001      	b.n	800103a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e009      	b.n	800104e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	401a      	ands	r2, r3
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	429a      	cmp	r2, r3
 800104a:	d0ed      	beq.n	8001028 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40007000 	.word	0x40007000
 800105c:	fffff9ff 	.word	0xfffff9ff
 8001060:	20000000 	.word	0x20000000
 8001064:	000f4240 	.word	0x000f4240

08001068 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <LL_RCC_GetAPB1Prescaler+0x14>)
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	23e0      	movs	r3, #224	; 0xe0
 8001072:	01db      	lsls	r3, r3, #7
 8001074:	4013      	ands	r3, r2
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e2fe      	b.n	8001690 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2201      	movs	r2, #1
 8001098:	4013      	ands	r3, r2
 800109a:	d100      	bne.n	800109e <HAL_RCC_OscConfig+0x1e>
 800109c:	e07c      	b.n	8001198 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800109e:	4bc3      	ldr	r3, [pc, #780]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2238      	movs	r2, #56	; 0x38
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010a8:	4bc0      	ldr	r3, [pc, #768]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b10      	cmp	r3, #16
 80010b6:	d102      	bne.n	80010be <HAL_RCC_OscConfig+0x3e>
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d002      	beq.n	80010c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d10b      	bne.n	80010dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	4bb9      	ldr	r3, [pc, #740]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	029b      	lsls	r3, r3, #10
 80010cc:	4013      	ands	r3, r2
 80010ce:	d062      	beq.n	8001196 <HAL_RCC_OscConfig+0x116>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d15e      	bne.n	8001196 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e2d9      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	025b      	lsls	r3, r3, #9
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d107      	bne.n	80010f8 <HAL_RCC_OscConfig+0x78>
 80010e8:	4bb0      	ldr	r3, [pc, #704]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4baf      	ldr	r3, [pc, #700]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e020      	b.n	800113a <HAL_RCC_OscConfig+0xba>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	23a0      	movs	r3, #160	; 0xa0
 80010fe:	02db      	lsls	r3, r3, #11
 8001100:	429a      	cmp	r2, r3
 8001102:	d10e      	bne.n	8001122 <HAL_RCC_OscConfig+0xa2>
 8001104:	4ba9      	ldr	r3, [pc, #676]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4ba8      	ldr	r3, [pc, #672]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	02c9      	lsls	r1, r1, #11
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	4ba6      	ldr	r3, [pc, #664]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4ba5      	ldr	r3, [pc, #660]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0249      	lsls	r1, r1, #9
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e00b      	b.n	800113a <HAL_RCC_OscConfig+0xba>
 8001122:	4ba2      	ldr	r3, [pc, #648]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4ba1      	ldr	r3, [pc, #644]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001128:	49a1      	ldr	r1, [pc, #644]	; (80013b0 <HAL_RCC_OscConfig+0x330>)
 800112a:	400a      	ands	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	4b9f      	ldr	r3, [pc, #636]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b9e      	ldr	r3, [pc, #632]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001134:	499f      	ldr	r1, [pc, #636]	; (80013b4 <HAL_RCC_OscConfig+0x334>)
 8001136:	400a      	ands	r2, r1
 8001138:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d014      	beq.n	800116c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001142:	f7ff fd2f 	bl	8000ba4 <HAL_GetTick>
 8001146:	0003      	movs	r3, r0
 8001148:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fd2a 	bl	8000ba4 <HAL_GetTick>
 8001150:	0002      	movs	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	; 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e298      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800115e:	4b93      	ldr	r3, [pc, #588]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	029b      	lsls	r3, r3, #10
 8001166:	4013      	ands	r3, r2
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0xcc>
 800116a:	e015      	b.n	8001198 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fd1a 	bl	8000ba4 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001176:	f7ff fd15 	bl	8000ba4 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e283      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001188:	4b88      	ldr	r3, [pc, #544]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d1f0      	bne.n	8001176 <HAL_RCC_OscConfig+0xf6>
 8001194:	e000      	b.n	8001198 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001196:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2202      	movs	r2, #2
 800119e:	4013      	ands	r3, r2
 80011a0:	d100      	bne.n	80011a4 <HAL_RCC_OscConfig+0x124>
 80011a2:	e099      	b.n	80012d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a4:	4b81      	ldr	r3, [pc, #516]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2238      	movs	r2, #56	; 0x38
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ae:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2203      	movs	r2, #3
 80011b4:	4013      	ands	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2b10      	cmp	r3, #16
 80011bc:	d102      	bne.n	80011c4 <HAL_RCC_OscConfig+0x144>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d002      	beq.n	80011ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d135      	bne.n	8001236 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ca:	4b78      	ldr	r3, [pc, #480]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4013      	ands	r3, r2
 80011d4:	d005      	beq.n	80011e2 <HAL_RCC_OscConfig+0x162>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e256      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b72      	ldr	r3, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4a74      	ldr	r2, [pc, #464]	; (80013b8 <HAL_RCC_OscConfig+0x338>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	0019      	movs	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	021a      	lsls	r2, r3, #8
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011f4:	430a      	orrs	r2, r1
 80011f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d112      	bne.n	8001224 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011fe:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6e      	ldr	r2, [pc, #440]	; (80013bc <HAL_RCC_OscConfig+0x33c>)
 8001204:	4013      	ands	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	4b67      	ldr	r3, [pc, #412]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001212:	4b66      	ldr	r3, [pc, #408]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0adb      	lsrs	r3, r3, #11
 8001218:	2207      	movs	r2, #7
 800121a:	4013      	ands	r3, r2
 800121c:	4a68      	ldr	r2, [pc, #416]	; (80013c0 <HAL_RCC_OscConfig+0x340>)
 800121e:	40da      	lsrs	r2, r3
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x344>)
 8001222:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001224:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x348>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff fc5f 	bl	8000aec <HAL_InitTick>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d051      	beq.n	80012d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e22c      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d030      	beq.n	80012a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800123e:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a5e      	ldr	r2, [pc, #376]	; (80013bc <HAL_RCC_OscConfig+0x33c>)
 8001244:	4013      	ands	r3, r2
 8001246:	0019      	movs	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	4b57      	ldr	r3, [pc, #348]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001252:	4b56      	ldr	r3, [pc, #344]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b55      	ldr	r3, [pc, #340]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0049      	lsls	r1, r1, #1
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fca0 	bl	8000ba4 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fc9b 	bl	8000ba4 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e209      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800127c:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4013      	ands	r3, r2
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b48      	ldr	r3, [pc, #288]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <HAL_RCC_OscConfig+0x338>)
 800128e:	4013      	ands	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	021a      	lsls	r2, r3, #8
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800129a:	430a      	orrs	r2, r1
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	e01b      	b.n	80012d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012a0:	4b42      	ldr	r3, [pc, #264]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012a6:	4949      	ldr	r1, [pc, #292]	; (80013cc <HAL_RCC_OscConfig+0x34c>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc7a 	bl	8000ba4 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff fc75 	bl	8000ba4 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1e3      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4013      	ands	r3, r2
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x236>
 80012d4:	e000      	b.n	80012d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2208      	movs	r2, #8
 80012de:	4013      	ands	r3, r2
 80012e0:	d047      	beq.n	8001372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80012e2:	4b32      	ldr	r3, [pc, #200]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2238      	movs	r2, #56	; 0x38
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b18      	cmp	r3, #24
 80012ec:	d10a      	bne.n	8001304 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80012ee:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	2202      	movs	r2, #2
 80012f4:	4013      	ands	r3, r2
 80012f6:	d03c      	beq.n	8001372 <HAL_RCC_OscConfig+0x2f2>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d138      	bne.n	8001372 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e1c5      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d019      	beq.n	8001340 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800130e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fc44 	bl	8000ba4 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fc3f 	bl	8000ba4 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e1ad      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d0f1      	beq.n	8001322 <HAL_RCC_OscConfig+0x2a2>
 800133e:	e018      	b.n	8001372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001342:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001346:	2101      	movs	r1, #1
 8001348:	438a      	bics	r2, r1
 800134a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc2a 	bl	8000ba4 <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fc25 	bl	8000ba4 <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e193      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 800136a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136c:	2202      	movs	r2, #2
 800136e:	4013      	ands	r3, r2
 8001370:	d1f1      	bne.n	8001356 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2204      	movs	r2, #4
 8001378:	4013      	ands	r3, r2
 800137a:	d100      	bne.n	800137e <HAL_RCC_OscConfig+0x2fe>
 800137c:	e0c6      	b.n	800150c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	231f      	movs	r3, #31
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2238      	movs	r2, #56	; 0x38
 800138c:	4013      	ands	r3, r2
 800138e:	2b20      	cmp	r3, #32
 8001390:	d11e      	bne.n	80013d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001396:	2202      	movs	r2, #2
 8001398:	4013      	ands	r3, r2
 800139a:	d100      	bne.n	800139e <HAL_RCC_OscConfig+0x31e>
 800139c:	e0b6      	b.n	800150c <HAL_RCC_OscConfig+0x48c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d000      	beq.n	80013a8 <HAL_RCC_OscConfig+0x328>
 80013a6:	e0b1      	b.n	800150c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e171      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	fffeffff 	.word	0xfffeffff
 80013b4:	fffbffff 	.word	0xfffbffff
 80013b8:	ffff80ff 	.word	0xffff80ff
 80013bc:	ffffc7ff 	.word	0xffffc7ff
 80013c0:	00f42400 	.word	0x00f42400
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000004 	.word	0x20000004
 80013cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013d0:	4bb1      	ldr	r3, [pc, #708]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80013d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	055b      	lsls	r3, r3, #21
 80013d8:	4013      	ands	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_OscConfig+0x360>
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x362>
 80013e0:	2300      	movs	r3, #0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d011      	beq.n	800140a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4bac      	ldr	r3, [pc, #688]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80013e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ea:	4bab      	ldr	r3, [pc, #684]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0549      	lsls	r1, r1, #21
 80013f0:	430a      	orrs	r2, r1
 80013f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80013f4:	4ba8      	ldr	r3, [pc, #672]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80013f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	055b      	lsls	r3, r3, #21
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001402:	231f      	movs	r3, #31
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140a:	4ba4      	ldr	r3, [pc, #656]	; (800169c <HAL_RCC_OscConfig+0x61c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4013      	ands	r3, r2
 8001414:	d11a      	bne.n	800144c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001416:	4ba1      	ldr	r3, [pc, #644]	; (800169c <HAL_RCC_OscConfig+0x61c>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4ba0      	ldr	r3, [pc, #640]	; (800169c <HAL_RCC_OscConfig+0x61c>)
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	0049      	lsls	r1, r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001424:	f7ff fbbe 	bl	8000ba4 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142e:	f7ff fbb9 	bl	8000ba4 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e127      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001440:	4b96      	ldr	r3, [pc, #600]	; (800169c <HAL_RCC_OscConfig+0x61c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4013      	ands	r3, r2
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x3e2>
 8001454:	4b90      	ldr	r3, [pc, #576]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001458:	4b8f      	ldr	r3, [pc, #572]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 800145a:	2101      	movs	r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001460:	e01c      	b.n	800149c <HAL_RCC_OscConfig+0x41c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b05      	cmp	r3, #5
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x404>
 800146a:	4b8b      	ldr	r3, [pc, #556]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 800146c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800146e:	4b8a      	ldr	r3, [pc, #552]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001470:	2104      	movs	r1, #4
 8001472:	430a      	orrs	r2, r1
 8001474:	65da      	str	r2, [r3, #92]	; 0x5c
 8001476:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001478:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800147a:	4b87      	ldr	r3, [pc, #540]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 800147c:	2101      	movs	r1, #1
 800147e:	430a      	orrs	r2, r1
 8001480:	65da      	str	r2, [r3, #92]	; 0x5c
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0x41c>
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001488:	4b83      	ldr	r3, [pc, #524]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 800148a:	2101      	movs	r1, #1
 800148c:	438a      	bics	r2, r1
 800148e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001490:	4b81      	ldr	r3, [pc, #516]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001492:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001494:	4b80      	ldr	r3, [pc, #512]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001496:	2104      	movs	r1, #4
 8001498:	438a      	bics	r2, r1
 800149a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d014      	beq.n	80014ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb7e 	bl	8000ba4 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ac:	e009      	b.n	80014c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7ff fb79 	bl	8000ba4 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	4a79      	ldr	r2, [pc, #484]	; (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0e6      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014c2:	4b75      	ldr	r3, [pc, #468]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x42e>
 80014cc:	e013      	b.n	80014f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb69 	bl	8000ba4 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014d6:	e009      	b.n	80014ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d8:	f7ff fb64 	bl	8000ba4 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	4a6f      	ldr	r2, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0d1      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014f6:	231f      	movs	r3, #31
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d105      	bne.n	800150c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001506:	4967      	ldr	r1, [pc, #412]	; (80016a4 <HAL_RCC_OscConfig+0x624>)
 8001508:	400a      	ands	r2, r1
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d100      	bne.n	8001516 <HAL_RCC_OscConfig+0x496>
 8001514:	e0bb      	b.n	800168e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2238      	movs	r2, #56	; 0x38
 800151c:	4013      	ands	r3, r2
 800151e:	2b10      	cmp	r3, #16
 8001520:	d100      	bne.n	8001524 <HAL_RCC_OscConfig+0x4a4>
 8001522:	e07b      	b.n	800161c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d156      	bne.n	80015da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152c:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001532:	495d      	ldr	r1, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x628>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fb34 	bl	8000ba4 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff fb2f 	bl	8000ba4 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e09d      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	049b      	lsls	r3, r3, #18
 800155c:	4013      	ands	r3, r2
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_RCC_OscConfig+0x62c>)
 8001566:	4013      	ands	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158c:	431a      	orrs	r2, r3
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	0449      	lsls	r1, r1, #17
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	0549      	lsls	r1, r1, #21
 80015ac:	430a      	orrs	r2, r1
 80015ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff faf8 	bl	8000ba4 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff faf3 	bl	8000ba4 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e061      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	049b      	lsls	r3, r3, #18
 80015d4:	4013      	ands	r3, r2
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x53a>
 80015d8:	e059      	b.n	800168e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 80015e0:	4931      	ldr	r1, [pc, #196]	; (80016a8 <HAL_RCC_OscConfig+0x628>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fadd 	bl	8000ba4 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fad8 	bl	8000ba4 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e046      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	049b      	lsls	r3, r3, #18
 800160a:	4013      	ands	r3, r2
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 8001614:	4926      	ldr	r1, [pc, #152]	; (80016b0 <HAL_RCC_OscConfig+0x630>)
 8001616:	400a      	ands	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	e038      	b.n	800168e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e033      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x618>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2203      	movs	r2, #3
 8001632:	401a      	ands	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	429a      	cmp	r2, r3
 800163a:	d126      	bne.n	800168a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2270      	movs	r2, #112	; 0x70
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d11f      	bne.n	800168a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	23fe      	movs	r3, #254	; 0xfe
 800164e:	01db      	lsls	r3, r3, #7
 8001650:	401a      	ands	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d116      	bne.n	800168a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	23f8      	movs	r3, #248	; 0xf8
 8001660:	039b      	lsls	r3, r3, #14
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d10e      	bne.n	800168a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	23e0      	movs	r3, #224	; 0xe0
 8001670:	051b      	lsls	r3, r3, #20
 8001672:	401a      	ands	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	0f5b      	lsrs	r3, r3, #29
 8001680:	075a      	lsls	r2, r3, #29
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b008      	add	sp, #32
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	40007000 	.word	0x40007000
 80016a0:	00001388 	.word	0x00001388
 80016a4:	efffffff 	.word	0xefffffff
 80016a8:	feffffff 	.word	0xfeffffff
 80016ac:	11c1808c 	.word	0x11c1808c
 80016b0:	eefefffc 	.word	0xeefefffc

080016b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0e9      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2207      	movs	r2, #7
 80016ce:	4013      	ands	r3, r2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d91e      	bls.n	8001714 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2207      	movs	r2, #7
 80016dc:	4393      	bics	r3, r2
 80016de:	0019      	movs	r1, r3
 80016e0:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCC_ClockConfig+0x1f0>)
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016e8:	f7ff fa5c 	bl	8000ba4 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f0:	e009      	b.n	8001706 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f2:	f7ff fa57 	bl	8000ba4 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	4a6a      	ldr	r2, [pc, #424]	; (80018a8 <HAL_RCC_ClockConfig+0x1f4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0ca      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2207      	movs	r2, #7
 800170c:	4013      	ands	r3, r2
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d015      	beq.n	800174a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2204      	movs	r2, #4
 8001724:	4013      	ands	r3, r2
 8001726:	d006      	beq.n	8001736 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001728:	4b60      	ldr	r3, [pc, #384]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 800172e:	21e0      	movs	r1, #224	; 0xe0
 8001730:	01c9      	lsls	r1, r1, #7
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001736:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4a5d      	ldr	r2, [pc, #372]	; (80018b0 <HAL_RCC_ClockConfig+0x1fc>)
 800173c:	4013      	ands	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d057      	beq.n	8001804 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	029b      	lsls	r3, r3, #10
 8001764:	4013      	ands	r3, r2
 8001766:	d12b      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e097      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d107      	bne.n	8001784 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001774:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	049b      	lsls	r3, r3, #18
 800177c:	4013      	ands	r3, r2
 800177e:	d11f      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e08b      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4013      	ands	r3, r2
 8001796:	d113      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e07f      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 80017a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d108      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e074      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	2202      	movs	r2, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e06d      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017c0:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2207      	movs	r2, #7
 80017c6:	4393      	bics	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017d4:	f7ff f9e6 	bl	8000ba4 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7ff f9e1 	bl	8000ba4 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a2f      	ldr	r2, [pc, #188]	; (80018a8 <HAL_RCC_ClockConfig+0x1f4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e054      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2238      	movs	r2, #56	; 0x38
 80017f8:	401a      	ands	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	429a      	cmp	r2, r3
 8001802:	d1ec      	bne.n	80017de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2207      	movs	r2, #7
 800180a:	4013      	ands	r3, r2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d21e      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2207      	movs	r2, #7
 8001818:	4393      	bics	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_RCC_ClockConfig+0x1f0>)
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001824:	f7ff f9be 	bl	8000ba4 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800182c:	e009      	b.n	8001842 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff f9b9 	bl	8000ba4 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <HAL_RCC_ClockConfig+0x1f4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e02c      	b.n	800189c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2207      	movs	r2, #7
 8001848:	4013      	ands	r3, r2
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d1ee      	bne.n	800182e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2204      	movs	r2, #4
 8001856:	4013      	ands	r3, r2
 8001858:	d009      	beq.n	800186e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <HAL_RCC_ClockConfig+0x200>)
 8001860:	4013      	ands	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800186e:	f000 f829 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001872:	0001      	movs	r1, r0
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_RCC_ClockConfig+0x1f8>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	220f      	movs	r2, #15
 800187c:	401a      	ands	r2, r3
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_RCC_ClockConfig+0x204>)
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	58d3      	ldr	r3, [r2, r3]
 8001884:	221f      	movs	r2, #31
 8001886:	4013      	ands	r3, r2
 8001888:	000a      	movs	r2, r1
 800188a:	40da      	lsrs	r2, r3
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_ClockConfig+0x208>)
 800188e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_ClockConfig+0x20c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff f929 	bl	8000aec <HAL_InitTick>
 800189a:	0003      	movs	r3, r0
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40022000 	.word	0x40022000
 80018a8:	00001388 	.word	0x00001388
 80018ac:	40021000 	.word	0x40021000
 80018b0:	fffff0ff 	.word	0xfffff0ff
 80018b4:	ffff8fff 	.word	0xffff8fff
 80018b8:	08002aa4 	.word	0x08002aa4
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ca:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2238      	movs	r2, #56	; 0x38
 80018d0:	4013      	ands	r3, r2
 80018d2:	d10f      	bne.n	80018f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0adb      	lsrs	r3, r3, #11
 80018da:	2207      	movs	r2, #7
 80018dc:	4013      	ands	r3, r2
 80018de:	2201      	movs	r2, #1
 80018e0:	409a      	lsls	r2, r3
 80018e2:	0013      	movs	r3, r2
 80018e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018e6:	6839      	ldr	r1, [r7, #0]
 80018e8:	4835      	ldr	r0, [pc, #212]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018ea:	f7fe fc0b 	bl	8000104 <__udivsi3>
 80018ee:	0003      	movs	r3, r0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	e05d      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2238      	movs	r2, #56	; 0x38
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	e054      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2238      	movs	r2, #56	; 0x38
 800190c:	4013      	ands	r3, r2
 800190e:	2b10      	cmp	r3, #16
 8001910:	d138      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2203      	movs	r2, #3
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	2207      	movs	r2, #7
 8001924:	4013      	ands	r3, r2
 8001926:	3301      	adds	r3, #1
 8001928:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d10d      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	4824      	ldr	r0, [pc, #144]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001934:	f7fe fbe6 	bl	8000104 <__udivsi3>
 8001938:	0003      	movs	r3, r0
 800193a:	0019      	movs	r1, r3
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	227f      	movs	r2, #127	; 0x7f
 8001944:	4013      	ands	r3, r2
 8001946:	434b      	muls	r3, r1
 8001948:	617b      	str	r3, [r7, #20]
        break;
 800194a:	e00d      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	481c      	ldr	r0, [pc, #112]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001950:	f7fe fbd8 	bl	8000104 <__udivsi3>
 8001954:	0003      	movs	r3, r0
 8001956:	0019      	movs	r1, r3
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	227f      	movs	r2, #127	; 0x7f
 8001960:	4013      	ands	r3, r2
 8001962:	434b      	muls	r3, r1
 8001964:	617b      	str	r3, [r7, #20]
        break;
 8001966:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0f5b      	lsrs	r3, r3, #29
 800196e:	2207      	movs	r2, #7
 8001970:	4013      	ands	r3, r2
 8001972:	3301      	adds	r3, #1
 8001974:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	6978      	ldr	r0, [r7, #20]
 800197a:	f7fe fbc3 	bl	8000104 <__udivsi3>
 800197e:	0003      	movs	r3, r0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e015      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2238      	movs	r2, #56	; 0x38
 800198a:	4013      	ands	r3, r2
 800198c:	2b20      	cmp	r3, #32
 800198e:	d103      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2238      	movs	r2, #56	; 0x38
 800199e:	4013      	ands	r3, r2
 80019a0:	2b18      	cmp	r3, #24
 80019a2:	d103      	bne.n	80019ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019a4:	23fa      	movs	r3, #250	; 0xfa
 80019a6:	01db      	lsls	r3, r3, #7
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e001      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019b0:	693b      	ldr	r3, [r7, #16]
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b006      	add	sp, #24
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	007a1200 	.word	0x007a1200

080019c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	20000000 	.word	0x20000000

080019dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019dc:	b5b0      	push	{r4, r5, r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80019e0:	f7ff fff2 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 80019e4:	0004      	movs	r4, r0
 80019e6:	f7ff fb3f 	bl	8001068 <LL_RCC_GetAPB1Prescaler>
 80019ea:	0003      	movs	r3, r0
 80019ec:	0b1a      	lsrs	r2, r3, #12
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	58d3      	ldr	r3, [r2, r3]
 80019f4:	221f      	movs	r2, #31
 80019f6:	4013      	ands	r3, r2
 80019f8:	40dc      	lsrs	r4, r3
 80019fa:	0023      	movs	r3, r4
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdb0      	pop	{r4, r5, r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	08002ae4 	.word	0x08002ae4

08001a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a10:	2313      	movs	r3, #19
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a18:	2312      	movs	r3, #18
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	029b      	lsls	r3, r3, #10
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a2c:	e0a3      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2011      	movs	r0, #17
 8001a30:	183b      	adds	r3, r7, r0
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4ba5      	ldr	r3, [pc, #660]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	055b      	lsls	r3, r3, #21
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d110      	bne.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4ba2      	ldr	r3, [pc, #648]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a46:	4ba1      	ldr	r3, [pc, #644]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0549      	lsls	r1, r1, #21
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a50:	4b9e      	ldr	r3, [pc, #632]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	055b      	lsls	r3, r3, #21
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5e:	183b      	adds	r3, r7, r0
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a64:	4b9a      	ldr	r3, [pc, #616]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b99      	ldr	r3, [pc, #612]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	0049      	lsls	r1, r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a72:	f7ff f897 	bl	8000ba4 <HAL_GetTick>
 8001a76:	0003      	movs	r3, r0
 8001a78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7c:	f7ff f892 	bl	8000ba4 <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d904      	bls.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a8a:	2313      	movs	r3, #19
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2203      	movs	r2, #3
 8001a90:	701a      	strb	r2, [r3, #0]
        break;
 8001a92:	e005      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a94:	4b8e      	ldr	r3, [pc, #568]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d0ed      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001aa0:	2313      	movs	r3, #19
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d154      	bne.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001aaa:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001aac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aae:	23c0      	movs	r3, #192	; 0xc0
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d019      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d014      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ac6:	4b81      	ldr	r3, [pc, #516]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	4a82      	ldr	r2, [pc, #520]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ad0:	4b7e      	ldr	r3, [pc, #504]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ad4:	4b7d      	ldr	r3, [pc, #500]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0249      	lsls	r1, r1, #9
 8001ada:	430a      	orrs	r2, r1
 8001adc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ade:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ae0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae2:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ae4:	497c      	ldr	r1, [pc, #496]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001aea:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	d016      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f854 	bl	8000ba4 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b00:	e00c      	b.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff f84f 	bl	8000ba4 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d904      	bls.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b12:	2313      	movs	r3, #19
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2203      	movs	r2, #3
 8001b18:	701a      	strb	r2, [r3, #0]
            break;
 8001b1a:	e004      	b.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	2202      	movs	r2, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	d0ed      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b26:	2313      	movs	r3, #19
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10a      	bne.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b30:	4b66      	ldr	r3, [pc, #408]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b44:	e00c      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b46:	2312      	movs	r3, #18
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2213      	movs	r2, #19
 8001b4c:	18ba      	adds	r2, r7, r2
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e005      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b54:	2312      	movs	r3, #18
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	2213      	movs	r2, #19
 8001b5a:	18ba      	adds	r2, r7, r2
 8001b5c:	7812      	ldrb	r2, [r2, #0]
 8001b5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b60:	2311      	movs	r3, #17
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d105      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6a:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b6e:	4b57      	ldr	r3, [pc, #348]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b70:	495b      	ldr	r1, [pc, #364]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001b72:	400a      	ands	r2, r1
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b80:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	2203      	movs	r2, #3
 8001b86:	4393      	bics	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b90:	430a      	orrs	r2, r1
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b9e:	4b4b      	ldr	r3, [pc, #300]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	4a42      	ldr	r2, [pc, #264]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	4b37      	ldr	r3, [pc, #220]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	4a3b      	ldr	r2, [pc, #236]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	01db      	lsls	r3, r3, #7
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d015      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	0899      	lsrs	r1, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69da      	ldr	r2, [r3, #28]
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	05db      	lsls	r3, r3, #23
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d106      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	0249      	lsls	r1, r1, #9
 8001c44:	430a      	orrs	r2, r1
 8001c46:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	039b      	lsls	r3, r3, #14
 8001c50:	4013      	ands	r3, r2
 8001c52:	d016      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1a      	ldr	r2, [r3, #32]
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c64:	430a      	orrs	r2, r1
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1a      	ldr	r2, [r3, #32]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	03db      	lsls	r3, r3, #15
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d106      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	0449      	lsls	r1, r1, #17
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d016      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	01db      	lsls	r3, r3, #7
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d106      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cb4:	2180      	movs	r1, #128	; 0x80
 8001cb6:	0249      	lsls	r1, r1, #9
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001cbc:	2312      	movs	r3, #18
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b006      	add	sp, #24
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	fffffcff 	.word	0xfffffcff
 8001cd8:	fffeffff 	.word	0xfffeffff
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	efffffff 	.word	0xefffffff
 8001ce4:	fffff3ff 	.word	0xfffff3ff
 8001ce8:	fff3ffff 	.word	0xfff3ffff
 8001cec:	ffcfffff 	.word	0xffcfffff
 8001cf0:	ffffcfff 	.word	0xffffcfff
 8001cf4:	ffbfffff 	.word	0xffbfffff
 8001cf8:	ffff3fff 	.word	0xffff3fff

08001cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e046      	b.n	8001d9c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2288      	movs	r2, #136	; 0x88
 8001d12:	589b      	ldr	r3, [r3, r2]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2284      	movs	r2, #132	; 0x84
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7fe fdb2 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2288      	movs	r2, #136	; 0x88
 8001d2c:	2124      	movs	r1, #36	; 0x24
 8001d2e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 f912 	bl	8001f6c <UART_SetConfig>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e024      	b.n	8001d9c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 fb7d 	bl	800245c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	490d      	ldr	r1, [pc, #52]	; (8001da4 <HAL_UART_Init+0xa8>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	212a      	movs	r1, #42	; 0x2a
 8001d7e:	438a      	bics	r2, r1
 8001d80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 fc15 	bl	80025c4 <UART_CheckIdleState>
 8001d9a:	0003      	movs	r3, r0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	ffffb7ff 	.word	0xffffb7ff

08001da8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	228c      	movs	r2, #140	; 0x8c
 8001dbc:	589b      	ldr	r3, [r3, r2]
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d000      	beq.n	8001dc4 <HAL_UART_Receive+0x1c>
 8001dc2:	e0cc      	b.n	8001f5e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_UART_Receive+0x2a>
 8001dca:	1dbb      	adds	r3, r7, #6
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0c4      	b.n	8001f60 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	015b      	lsls	r3, r3, #5
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d109      	bne.n	8001df6 <HAL_UART_Receive+0x4e>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0b4      	b.n	8001f60 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2290      	movs	r2, #144	; 0x90
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	228c      	movs	r2, #140	; 0x8c
 8001e02:	2122      	movs	r1, #34	; 0x22
 8001e04:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e0c:	f7fe feca 	bl	8000ba4 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1dba      	adds	r2, r7, #6
 8001e18:	215c      	movs	r1, #92	; 0x5c
 8001e1a:	8812      	ldrh	r2, [r2, #0]
 8001e1c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1dba      	adds	r2, r7, #6
 8001e22:	215e      	movs	r1, #94	; 0x5e
 8001e24:	8812      	ldrh	r2, [r2, #0]
 8001e26:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	015b      	lsls	r3, r3, #5
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d10d      	bne.n	8001e50 <HAL_UART_Receive+0xa8>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <HAL_UART_Receive+0x9e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2260      	movs	r2, #96	; 0x60
 8001e40:	4949      	ldr	r1, [pc, #292]	; (8001f68 <HAL_UART_Receive+0x1c0>)
 8001e42:	5299      	strh	r1, [r3, r2]
 8001e44:	e02e      	b.n	8001ea4 <HAL_UART_Receive+0xfc>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2260      	movs	r2, #96	; 0x60
 8001e4a:	21ff      	movs	r1, #255	; 0xff
 8001e4c:	5299      	strh	r1, [r3, r2]
 8001e4e:	e029      	b.n	8001ea4 <HAL_UART_Receive+0xfc>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_UART_Receive+0xcc>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <HAL_UART_Receive+0xc2>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2260      	movs	r2, #96	; 0x60
 8001e64:	21ff      	movs	r1, #255	; 0xff
 8001e66:	5299      	strh	r1, [r3, r2]
 8001e68:	e01c      	b.n	8001ea4 <HAL_UART_Receive+0xfc>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2260      	movs	r2, #96	; 0x60
 8001e6e:	217f      	movs	r1, #127	; 0x7f
 8001e70:	5299      	strh	r1, [r3, r2]
 8001e72:	e017      	b.n	8001ea4 <HAL_UART_Receive+0xfc>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	055b      	lsls	r3, r3, #21
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d10d      	bne.n	8001e9c <HAL_UART_Receive+0xf4>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d104      	bne.n	8001e92 <HAL_UART_Receive+0xea>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2260      	movs	r2, #96	; 0x60
 8001e8c:	217f      	movs	r1, #127	; 0x7f
 8001e8e:	5299      	strh	r1, [r3, r2]
 8001e90:	e008      	b.n	8001ea4 <HAL_UART_Receive+0xfc>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2260      	movs	r2, #96	; 0x60
 8001e96:	213f      	movs	r1, #63	; 0x3f
 8001e98:	5299      	strh	r1, [r3, r2]
 8001e9a:	e003      	b.n	8001ea4 <HAL_UART_Receive+0xfc>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2260      	movs	r2, #96	; 0x60
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	2160      	movs	r1, #96	; 0x60
 8001eac:	5a52      	ldrh	r2, [r2, r1]
 8001eae:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	015b      	lsls	r3, r3, #5
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d108      	bne.n	8001ece <HAL_UART_Receive+0x126>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	e003      	b.n	8001ed6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001ed6:	e036      	b.n	8001f46 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	f000 fbbb 	bl	8002660 <UART_WaitOnFlagUntilTimeout>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e036      	b.n	8001f60 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10e      	bne.n	8001f16 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2212      	movs	r2, #18
 8001f02:	18ba      	adds	r2, r7, r2
 8001f04:	8812      	ldrh	r2, [r2, #0]
 8001f06:	4013      	ands	r3, r2
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	3302      	adds	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	e00e      	b.n	8001f34 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2212      	movs	r2, #18
 8001f20:	18ba      	adds	r2, r7, r2
 8001f22:	8812      	ldrh	r2, [r2, #0]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	4013      	ands	r3, r2
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	225e      	movs	r2, #94	; 0x5e
 8001f38:	5a9b      	ldrh	r3, [r3, r2]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	225e      	movs	r2, #94	; 0x5e
 8001f44:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	225e      	movs	r2, #94	; 0x5e
 8001f4a:	5a9b      	ldrh	r3, [r3, r2]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1c2      	bne.n	8001ed8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	228c      	movs	r2, #140	; 0x8c
 8001f56:	2120      	movs	r1, #32
 8001f58:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
  }
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b008      	add	sp, #32
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	000001ff 	.word	0x000001ff

08001f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b090      	sub	sp, #64	; 0x40
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f74:	231a      	movs	r3, #26
 8001f76:	2220      	movs	r2, #32
 8001f78:	189b      	adds	r3, r3, r2
 8001f7a:	19db      	adds	r3, r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4ac4      	ldr	r2, [pc, #784]	; (80022b0 <UART_SetConfig+0x344>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001faa:	430b      	orrs	r3, r1
 8001fac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4abf      	ldr	r2, [pc, #764]	; (80022b4 <UART_SetConfig+0x348>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	0018      	movs	r0, r3
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4ab9      	ldr	r2, [pc, #740]	; (80022b8 <UART_SetConfig+0x34c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d004      	beq.n	8001fe2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4ab4      	ldr	r2, [pc, #720]	; (80022bc <UART_SetConfig+0x350>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	220f      	movs	r2, #15
 8002000:	4393      	bics	r3, r2
 8002002:	0018      	movs	r0, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	0003      	movs	r3, r0
 800200e:	430b      	orrs	r3, r1
 8002010:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4aaa      	ldr	r2, [pc, #680]	; (80022c0 <UART_SetConfig+0x354>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d131      	bne.n	8002080 <UART_SetConfig+0x114>
 800201c:	4ba9      	ldr	r3, [pc, #676]	; (80022c4 <UART_SetConfig+0x358>)
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	2203      	movs	r2, #3
 8002022:	4013      	ands	r3, r2
 8002024:	2b03      	cmp	r3, #3
 8002026:	d01d      	beq.n	8002064 <UART_SetConfig+0xf8>
 8002028:	d823      	bhi.n	8002072 <UART_SetConfig+0x106>
 800202a:	2b02      	cmp	r3, #2
 800202c:	d00c      	beq.n	8002048 <UART_SetConfig+0xdc>
 800202e:	d820      	bhi.n	8002072 <UART_SetConfig+0x106>
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <UART_SetConfig+0xce>
 8002034:	2b01      	cmp	r3, #1
 8002036:	d00e      	beq.n	8002056 <UART_SetConfig+0xea>
 8002038:	e01b      	b.n	8002072 <UART_SetConfig+0x106>
 800203a:	231b      	movs	r3, #27
 800203c:	2220      	movs	r2, #32
 800203e:	189b      	adds	r3, r3, r2
 8002040:	19db      	adds	r3, r3, r7
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e071      	b.n	800212c <UART_SetConfig+0x1c0>
 8002048:	231b      	movs	r3, #27
 800204a:	2220      	movs	r2, #32
 800204c:	189b      	adds	r3, r3, r2
 800204e:	19db      	adds	r3, r3, r7
 8002050:	2202      	movs	r2, #2
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e06a      	b.n	800212c <UART_SetConfig+0x1c0>
 8002056:	231b      	movs	r3, #27
 8002058:	2220      	movs	r2, #32
 800205a:	189b      	adds	r3, r3, r2
 800205c:	19db      	adds	r3, r3, r7
 800205e:	2204      	movs	r2, #4
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e063      	b.n	800212c <UART_SetConfig+0x1c0>
 8002064:	231b      	movs	r3, #27
 8002066:	2220      	movs	r2, #32
 8002068:	189b      	adds	r3, r3, r2
 800206a:	19db      	adds	r3, r3, r7
 800206c:	2208      	movs	r2, #8
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e05c      	b.n	800212c <UART_SetConfig+0x1c0>
 8002072:	231b      	movs	r3, #27
 8002074:	2220      	movs	r2, #32
 8002076:	189b      	adds	r3, r3, r2
 8002078:	19db      	adds	r3, r3, r7
 800207a:	2210      	movs	r2, #16
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e055      	b.n	800212c <UART_SetConfig+0x1c0>
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a90      	ldr	r2, [pc, #576]	; (80022c8 <UART_SetConfig+0x35c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d106      	bne.n	8002098 <UART_SetConfig+0x12c>
 800208a:	231b      	movs	r3, #27
 800208c:	2220      	movs	r2, #32
 800208e:	189b      	adds	r3, r3, r2
 8002090:	19db      	adds	r3, r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e049      	b.n	800212c <UART_SetConfig+0x1c0>
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a86      	ldr	r2, [pc, #536]	; (80022b8 <UART_SetConfig+0x34c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d13e      	bne.n	8002120 <UART_SetConfig+0x1b4>
 80020a2:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <UART_SetConfig+0x358>)
 80020a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	4013      	ands	r3, r2
 80020ac:	22c0      	movs	r2, #192	; 0xc0
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d027      	beq.n	8002104 <UART_SetConfig+0x198>
 80020b4:	22c0      	movs	r2, #192	; 0xc0
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d82a      	bhi.n	8002112 <UART_SetConfig+0x1a6>
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d011      	beq.n	80020e8 <UART_SetConfig+0x17c>
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d822      	bhi.n	8002112 <UART_SetConfig+0x1a6>
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <UART_SetConfig+0x16e>
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	00d2      	lsls	r2, r2, #3
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00e      	beq.n	80020f6 <UART_SetConfig+0x18a>
 80020d8:	e01b      	b.n	8002112 <UART_SetConfig+0x1a6>
 80020da:	231b      	movs	r3, #27
 80020dc:	2220      	movs	r2, #32
 80020de:	189b      	adds	r3, r3, r2
 80020e0:	19db      	adds	r3, r3, r7
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e021      	b.n	800212c <UART_SetConfig+0x1c0>
 80020e8:	231b      	movs	r3, #27
 80020ea:	2220      	movs	r2, #32
 80020ec:	189b      	adds	r3, r3, r2
 80020ee:	19db      	adds	r3, r3, r7
 80020f0:	2202      	movs	r2, #2
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e01a      	b.n	800212c <UART_SetConfig+0x1c0>
 80020f6:	231b      	movs	r3, #27
 80020f8:	2220      	movs	r2, #32
 80020fa:	189b      	adds	r3, r3, r2
 80020fc:	19db      	adds	r3, r3, r7
 80020fe:	2204      	movs	r2, #4
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e013      	b.n	800212c <UART_SetConfig+0x1c0>
 8002104:	231b      	movs	r3, #27
 8002106:	2220      	movs	r2, #32
 8002108:	189b      	adds	r3, r3, r2
 800210a:	19db      	adds	r3, r3, r7
 800210c:	2208      	movs	r2, #8
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e00c      	b.n	800212c <UART_SetConfig+0x1c0>
 8002112:	231b      	movs	r3, #27
 8002114:	2220      	movs	r2, #32
 8002116:	189b      	adds	r3, r3, r2
 8002118:	19db      	adds	r3, r3, r7
 800211a:	2210      	movs	r2, #16
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e005      	b.n	800212c <UART_SetConfig+0x1c0>
 8002120:	231b      	movs	r3, #27
 8002122:	2220      	movs	r2, #32
 8002124:	189b      	adds	r3, r3, r2
 8002126:	19db      	adds	r3, r3, r7
 8002128:	2210      	movs	r2, #16
 800212a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <UART_SetConfig+0x34c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d000      	beq.n	8002138 <UART_SetConfig+0x1cc>
 8002136:	e092      	b.n	800225e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002138:	231b      	movs	r3, #27
 800213a:	2220      	movs	r2, #32
 800213c:	189b      	adds	r3, r3, r2
 800213e:	19db      	adds	r3, r3, r7
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b08      	cmp	r3, #8
 8002144:	d015      	beq.n	8002172 <UART_SetConfig+0x206>
 8002146:	dc18      	bgt.n	800217a <UART_SetConfig+0x20e>
 8002148:	2b04      	cmp	r3, #4
 800214a:	d00d      	beq.n	8002168 <UART_SetConfig+0x1fc>
 800214c:	dc15      	bgt.n	800217a <UART_SetConfig+0x20e>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <UART_SetConfig+0x1ec>
 8002152:	2b02      	cmp	r3, #2
 8002154:	d005      	beq.n	8002162 <UART_SetConfig+0x1f6>
 8002156:	e010      	b.n	800217a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002158:	f7ff fc40 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 800215c:	0003      	movs	r3, r0
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002160:	e014      	b.n	800218c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <UART_SetConfig+0x360>)
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002166:	e011      	b.n	800218c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002168:	f7ff fbac 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 800216c:	0003      	movs	r3, r0
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002170:	e00c      	b.n	800218c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002178:	e008      	b.n	800218c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800217e:	231a      	movs	r3, #26
 8002180:	2220      	movs	r2, #32
 8002182:	189b      	adds	r3, r3, r2
 8002184:	19db      	adds	r3, r3, r7
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
        break;
 800218a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	2b00      	cmp	r3, #0
 8002190:	d100      	bne.n	8002194 <UART_SetConfig+0x228>
 8002192:	e147      	b.n	8002424 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002198:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <UART_SetConfig+0x364>)
 800219a:	0052      	lsls	r2, r2, #1
 800219c:	5ad3      	ldrh	r3, [r2, r3]
 800219e:	0019      	movs	r1, r3
 80021a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021a2:	f7fd ffaf 	bl	8000104 <__udivsi3>
 80021a6:	0003      	movs	r3, r0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	0013      	movs	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	189b      	adds	r3, r3, r2
 80021b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d305      	bcc.n	80021c6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d906      	bls.n	80021d4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80021c6:	231a      	movs	r3, #26
 80021c8:	2220      	movs	r2, #32
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	19db      	adds	r3, r3, r7
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e127      	b.n	8002424 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <UART_SetConfig+0x364>)
 80021e2:	0052      	lsls	r2, r2, #1
 80021e4:	5ad3      	ldrh	r3, [r2, r3]
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	69b8      	ldr	r0, [r7, #24]
 80021f2:	69f9      	ldr	r1, [r7, #28]
 80021f4:	f7fe f8fc 	bl	80003f0 <__aeabi_uldivmod>
 80021f8:	0002      	movs	r2, r0
 80021fa:	000b      	movs	r3, r1
 80021fc:	0e11      	lsrs	r1, r2, #24
 80021fe:	021d      	lsls	r5, r3, #8
 8002200:	430d      	orrs	r5, r1
 8002202:	0214      	lsls	r4, r2, #8
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68b8      	ldr	r0, [r7, #8]
 8002212:	68f9      	ldr	r1, [r7, #12]
 8002214:	1900      	adds	r0, r0, r4
 8002216:	4169      	adcs	r1, r5
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f7fe f8e3 	bl	80003f0 <__aeabi_uldivmod>
 800222a:	0002      	movs	r2, r0
 800222c:	000b      	movs	r3, r1
 800222e:	0013      	movs	r3, r2
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	429a      	cmp	r2, r3
 800223a:	d309      	bcc.n	8002250 <UART_SetConfig+0x2e4>
 800223c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	035b      	lsls	r3, r3, #13
 8002242:	429a      	cmp	r2, r3
 8002244:	d204      	bcs.n	8002250 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	e0e9      	b.n	8002424 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002250:	231a      	movs	r3, #26
 8002252:	2220      	movs	r2, #32
 8002254:	189b      	adds	r3, r3, r2
 8002256:	19db      	adds	r3, r3, r7
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e0e2      	b.n	8002424 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	429a      	cmp	r2, r3
 8002268:	d000      	beq.n	800226c <UART_SetConfig+0x300>
 800226a:	e083      	b.n	8002374 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800226c:	231b      	movs	r3, #27
 800226e:	2220      	movs	r2, #32
 8002270:	189b      	adds	r3, r3, r2
 8002272:	19db      	adds	r3, r3, r7
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b08      	cmp	r3, #8
 8002278:	d015      	beq.n	80022a6 <UART_SetConfig+0x33a>
 800227a:	dc2b      	bgt.n	80022d4 <UART_SetConfig+0x368>
 800227c:	2b04      	cmp	r3, #4
 800227e:	d00d      	beq.n	800229c <UART_SetConfig+0x330>
 8002280:	dc28      	bgt.n	80022d4 <UART_SetConfig+0x368>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <UART_SetConfig+0x320>
 8002286:	2b02      	cmp	r3, #2
 8002288:	d005      	beq.n	8002296 <UART_SetConfig+0x32a>
 800228a:	e023      	b.n	80022d4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800228c:	f7ff fba6 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 8002290:	0003      	movs	r3, r0
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002294:	e027      	b.n	80022e6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <UART_SetConfig+0x360>)
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800229a:	e024      	b.n	80022e6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800229c:	f7ff fb12 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 80022a0:	0003      	movs	r3, r0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022a4:	e01f      	b.n	80022e6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022ac:	e01b      	b.n	80022e6 <UART_SetConfig+0x37a>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	cfff69f3 	.word	0xcfff69f3
 80022b4:	ffffcfff 	.word	0xffffcfff
 80022b8:	40008000 	.word	0x40008000
 80022bc:	11fff4ff 	.word	0x11fff4ff
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40004400 	.word	0x40004400
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	08002b04 	.word	0x08002b04
      default:
        pclk = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80022d8:	231a      	movs	r3, #26
 80022da:	2220      	movs	r2, #32
 80022dc:	189b      	adds	r3, r3, r2
 80022de:	19db      	adds	r3, r3, r7
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
        break;
 80022e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <UART_SetConfig+0x382>
 80022ec:	e09a      	b.n	8002424 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f2:	4b58      	ldr	r3, [pc, #352]	; (8002454 <UART_SetConfig+0x4e8>)
 80022f4:	0052      	lsls	r2, r2, #1
 80022f6:	5ad3      	ldrh	r3, [r2, r3]
 80022f8:	0019      	movs	r1, r3
 80022fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022fc:	f7fd ff02 	bl	8000104 <__udivsi3>
 8002300:	0003      	movs	r3, r0
 8002302:	005a      	lsls	r2, r3, #1
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	18d2      	adds	r2, r2, r3
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0019      	movs	r1, r3
 8002312:	0010      	movs	r0, r2
 8002314:	f7fd fef6 	bl	8000104 <__udivsi3>
 8002318:	0003      	movs	r3, r0
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	2b0f      	cmp	r3, #15
 8002320:	d921      	bls.n	8002366 <UART_SetConfig+0x3fa>
 8002322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	429a      	cmp	r2, r3
 800232a:	d21c      	bcs.n	8002366 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	b29a      	uxth	r2, r3
 8002330:	200e      	movs	r0, #14
 8002332:	2420      	movs	r4, #32
 8002334:	1903      	adds	r3, r0, r4
 8002336:	19db      	adds	r3, r3, r7
 8002338:	210f      	movs	r1, #15
 800233a:	438a      	bics	r2, r1
 800233c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	b29b      	uxth	r3, r3
 8002344:	2207      	movs	r2, #7
 8002346:	4013      	ands	r3, r2
 8002348:	b299      	uxth	r1, r3
 800234a:	1903      	adds	r3, r0, r4
 800234c:	19db      	adds	r3, r3, r7
 800234e:	1902      	adds	r2, r0, r4
 8002350:	19d2      	adds	r2, r2, r7
 8002352:	8812      	ldrh	r2, [r2, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1902      	adds	r2, r0, r4
 800235e:	19d2      	adds	r2, r2, r7
 8002360:	8812      	ldrh	r2, [r2, #0]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	e05e      	b.n	8002424 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002366:	231a      	movs	r3, #26
 8002368:	2220      	movs	r2, #32
 800236a:	189b      	adds	r3, r3, r2
 800236c:	19db      	adds	r3, r3, r7
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e057      	b.n	8002424 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002374:	231b      	movs	r3, #27
 8002376:	2220      	movs	r2, #32
 8002378:	189b      	adds	r3, r3, r2
 800237a:	19db      	adds	r3, r3, r7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b08      	cmp	r3, #8
 8002380:	d015      	beq.n	80023ae <UART_SetConfig+0x442>
 8002382:	dc18      	bgt.n	80023b6 <UART_SetConfig+0x44a>
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00d      	beq.n	80023a4 <UART_SetConfig+0x438>
 8002388:	dc15      	bgt.n	80023b6 <UART_SetConfig+0x44a>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <UART_SetConfig+0x428>
 800238e:	2b02      	cmp	r3, #2
 8002390:	d005      	beq.n	800239e <UART_SetConfig+0x432>
 8002392:	e010      	b.n	80023b6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002394:	f7ff fb22 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 8002398:	0003      	movs	r3, r0
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800239c:	e014      	b.n	80023c8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <UART_SetConfig+0x4ec>)
 80023a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023a2:	e011      	b.n	80023c8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023a4:	f7ff fa8e 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 80023a8:	0003      	movs	r3, r0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023ac:	e00c      	b.n	80023c8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023b4:	e008      	b.n	80023c8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80023ba:	231a      	movs	r3, #26
 80023bc:	2220      	movs	r2, #32
 80023be:	189b      	adds	r3, r3, r2
 80023c0:	19db      	adds	r3, r3, r7
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
        break;
 80023c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d02a      	beq.n	8002424 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <UART_SetConfig+0x4e8>)
 80023d4:	0052      	lsls	r2, r2, #1
 80023d6:	5ad3      	ldrh	r3, [r2, r3]
 80023d8:	0019      	movs	r1, r3
 80023da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023dc:	f7fd fe92 	bl	8000104 <__udivsi3>
 80023e0:	0003      	movs	r3, r0
 80023e2:	001a      	movs	r2, r3
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	085b      	lsrs	r3, r3, #1
 80023ea:	18d2      	adds	r2, r2, r3
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0019      	movs	r1, r3
 80023f2:	0010      	movs	r0, r2
 80023f4:	f7fd fe86 	bl	8000104 <__udivsi3>
 80023f8:	0003      	movs	r3, r0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	d90a      	bls.n	8002418 <UART_SetConfig+0x4ac>
 8002402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	025b      	lsls	r3, r3, #9
 8002408:	429a      	cmp	r2, r3
 800240a:	d205      	bcs.n	8002418 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	b29a      	uxth	r2, r3
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	e005      	b.n	8002424 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002418:	231a      	movs	r3, #26
 800241a:	2220      	movs	r2, #32
 800241c:	189b      	adds	r3, r3, r2
 800241e:	19db      	adds	r3, r3, r7
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	226a      	movs	r2, #106	; 0x6a
 8002428:	2101      	movs	r1, #1
 800242a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	2268      	movs	r2, #104	; 0x68
 8002430:	2101      	movs	r1, #1
 8002432:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	2200      	movs	r2, #0
 8002438:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	2200      	movs	r2, #0
 800243e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002440:	231a      	movs	r3, #26
 8002442:	2220      	movs	r2, #32
 8002444:	189b      	adds	r3, r3, r2
 8002446:	19db      	adds	r3, r3, r7
 8002448:	781b      	ldrb	r3, [r3, #0]
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b010      	add	sp, #64	; 0x40
 8002450:	bdb0      	pop	{r4, r5, r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	08002b04 	.word	0x08002b04
 8002458:	00f42400 	.word	0x00f42400

0800245c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	d00b      	beq.n	8002486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a4a      	ldr	r2, [pc, #296]	; (80025a0 <UART_AdvFeatureConfig+0x144>)
 8002476:	4013      	ands	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	2202      	movs	r2, #2
 800248c:	4013      	ands	r3, r2
 800248e:	d00b      	beq.n	80024a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a43      	ldr	r2, [pc, #268]	; (80025a4 <UART_AdvFeatureConfig+0x148>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	2204      	movs	r2, #4
 80024ae:	4013      	ands	r3, r2
 80024b0:	d00b      	beq.n	80024ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <UART_AdvFeatureConfig+0x14c>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	2208      	movs	r2, #8
 80024d0:	4013      	ands	r3, r2
 80024d2:	d00b      	beq.n	80024ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <UART_AdvFeatureConfig+0x150>)
 80024dc:	4013      	ands	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	2210      	movs	r2, #16
 80024f2:	4013      	ands	r3, r2
 80024f4:	d00b      	beq.n	800250e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <UART_AdvFeatureConfig+0x154>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	2220      	movs	r2, #32
 8002514:	4013      	ands	r3, r2
 8002516:	d00b      	beq.n	8002530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <UART_AdvFeatureConfig+0x158>)
 8002520:	4013      	ands	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	2240      	movs	r2, #64	; 0x40
 8002536:	4013      	ands	r3, r2
 8002538:	d01d      	beq.n	8002576 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <UART_AdvFeatureConfig+0x15c>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	035b      	lsls	r3, r3, #13
 800255a:	429a      	cmp	r2, r3
 800255c:	d10b      	bne.n	8002576 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a15      	ldr	r2, [pc, #84]	; (80025bc <UART_AdvFeatureConfig+0x160>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	4013      	ands	r3, r2
 800257e:	d00b      	beq.n	8002598 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <UART_AdvFeatureConfig+0x164>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
  }
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	fffdffff 	.word	0xfffdffff
 80025a4:	fffeffff 	.word	0xfffeffff
 80025a8:	fffbffff 	.word	0xfffbffff
 80025ac:	ffff7fff 	.word	0xffff7fff
 80025b0:	ffffefff 	.word	0xffffefff
 80025b4:	ffffdfff 	.word	0xffffdfff
 80025b8:	ffefffff 	.word	0xffefffff
 80025bc:	ff9fffff 	.word	0xff9fffff
 80025c0:	fff7ffff 	.word	0xfff7ffff

080025c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2290      	movs	r2, #144	; 0x90
 80025d0:	2100      	movs	r1, #0
 80025d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025d4:	f7fe fae6 	bl	8000ba4 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2208      	movs	r2, #8
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d10c      	bne.n	8002604 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	0391      	lsls	r1, r2, #14
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <UART_CheckIdleState+0x98>)
 80025f4:	9200      	str	r2, [sp, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f000 f832 	bl	8002660 <UART_WaitOnFlagUntilTimeout>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d001      	beq.n	8002604 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e026      	b.n	8002652 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2204      	movs	r2, #4
 800260c:	4013      	ands	r3, r2
 800260e:	2b04      	cmp	r3, #4
 8002610:	d10c      	bne.n	800262c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	03d1      	lsls	r1, r2, #15
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <UART_CheckIdleState+0x98>)
 800261c:	9200      	str	r2, [sp, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	f000 f81e 	bl	8002660 <UART_WaitOnFlagUntilTimeout>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e012      	b.n	8002652 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2288      	movs	r2, #136	; 0x88
 8002630:	2120      	movs	r1, #32
 8002632:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	228c      	movs	r2, #140	; 0x8c
 8002638:	2120      	movs	r1, #32
 800263a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2284      	movs	r2, #132	; 0x84
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b004      	add	sp, #16
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	01ffffff 	.word	0x01ffffff

08002660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b094      	sub	sp, #80	; 0x50
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	1dfb      	adds	r3, r7, #7
 800266e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002670:	e0a7      	b.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002674:	3301      	adds	r3, #1
 8002676:	d100      	bne.n	800267a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002678:	e0a3      	b.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7fe fa93 	bl	8000ba4 <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <UART_WaitOnFlagUntilTimeout+0x30>
 800268a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800268c:	2b00      	cmp	r3, #0
 800268e:	d13f      	bne.n	8002710 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002690:	f3ef 8310 	mrs	r3, PRIMASK
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002698:	647b      	str	r3, [r7, #68]	; 0x44
 800269a:	2301      	movs	r3, #1
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	494e      	ldr	r1, [pc, #312]	; (80027ec <UART_WaitOnFlagUntilTimeout+0x18c>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	f383 8810 	msr	PRIMASK, r3
}
 80026c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c2:	f3ef 8310 	mrs	r3, PRIMASK
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40
 80026cc:	2301      	movs	r3, #1
 80026ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	f383 8810 	msr	PRIMASK, r3
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2101      	movs	r1, #1
 80026e4:	438a      	bics	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ee:	f383 8810 	msr	PRIMASK, r3
}
 80026f2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2288      	movs	r2, #136	; 0x88
 80026f8:	2120      	movs	r1, #32
 80026fa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	228c      	movs	r2, #140	; 0x8c
 8002700:	2120      	movs	r1, #32
 8002702:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2284      	movs	r2, #132	; 0x84
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e069      	b.n	80027e4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	d052      	beq.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	401a      	ands	r2, r3
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	429a      	cmp	r2, r3
 800272e:	d148      	bne.n	80027c2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273a:	f3ef 8310 	mrs	r3, PRIMASK
 800273e:	613b      	str	r3, [r7, #16]
  return(result);
 8002740:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002744:	2301      	movs	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4924      	ldr	r1, [pc, #144]	; (80027ec <UART_WaitOnFlagUntilTimeout+0x18c>)
 800275c:	400a      	ands	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276c:	f3ef 8310 	mrs	r3, PRIMASK
 8002770:	61fb      	str	r3, [r7, #28]
  return(result);
 8002772:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002774:	64bb      	str	r3, [r7, #72]	; 0x48
 8002776:	2301      	movs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f383 8810 	msr	PRIMASK, r3
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	438a      	bics	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f383 8810 	msr	PRIMASK, r3
}
 800279c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2288      	movs	r2, #136	; 0x88
 80027a2:	2120      	movs	r1, #32
 80027a4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	228c      	movs	r2, #140	; 0x8c
 80027aa:	2120      	movs	r1, #32
 80027ac:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2290      	movs	r2, #144	; 0x90
 80027b2:	2120      	movs	r1, #32
 80027b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2284      	movs	r2, #132	; 0x84
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e010      	b.n	80027e4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	4013      	ands	r3, r2
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	425a      	negs	r2, r3
 80027d2:	4153      	adcs	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	001a      	movs	r2, r3
 80027d8:	1dfb      	adds	r3, r7, #7
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d100      	bne.n	80027e2 <UART_WaitOnFlagUntilTimeout+0x182>
 80027e0:	e747      	b.n	8002672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b014      	add	sp, #80	; 0x50
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	fffffe5f 	.word	0xfffffe5f

080027f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2284      	movs	r2, #132	; 0x84
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_UARTEx_DisableFifoMode+0x16>
 8002802:	2302      	movs	r3, #2
 8002804:	e027      	b.n	8002856 <HAL_UARTEx_DisableFifoMode+0x66>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2284      	movs	r2, #132	; 0x84
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2288      	movs	r2, #136	; 0x88
 8002812:	2124      	movs	r1, #36	; 0x24
 8002814:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	438a      	bics	r2, r1
 800282c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2288      	movs	r2, #136	; 0x88
 8002848:	2120      	movs	r1, #32
 800284a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2284      	movs	r2, #132	; 0x84
 8002850:	2100      	movs	r1, #0
 8002852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	dfffffff 	.word	0xdfffffff

08002864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2284      	movs	r2, #132	; 0x84
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002878:	2302      	movs	r3, #2
 800287a:	e02e      	b.n	80028da <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2284      	movs	r2, #132	; 0x84
 8002880:	2101      	movs	r1, #1
 8002882:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2288      	movs	r2, #136	; 0x88
 8002888:	2124      	movs	r1, #36	; 0x24
 800288a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	438a      	bics	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	08d9      	lsrs	r1, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f854 	bl	8002968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2288      	movs	r2, #136	; 0x88
 80028cc:	2120      	movs	r1, #32
 80028ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2284      	movs	r2, #132	; 0x84
 80028d4:	2100      	movs	r1, #0
 80028d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b004      	add	sp, #16
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2284      	movs	r2, #132	; 0x84
 80028f2:	5c9b      	ldrb	r3, [r3, r2]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e02f      	b.n	800295c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2284      	movs	r2, #132	; 0x84
 8002900:	2101      	movs	r1, #1
 8002902:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2288      	movs	r2, #136	; 0x88
 8002908:	2124      	movs	r1, #36	; 0x24
 800290a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2101      	movs	r1, #1
 8002920:	438a      	bics	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 f813 	bl	8002968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2288      	movs	r2, #136	; 0x88
 800294e:	2120      	movs	r1, #32
 8002950:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2284      	movs	r2, #132	; 0x84
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bd80      	pop	{r7, pc}
 8002964:	f1ffffff 	.word	0xf1ffffff

08002968 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	226a      	movs	r2, #106	; 0x6a
 800297c:	2101      	movs	r1, #1
 800297e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2268      	movs	r2, #104	; 0x68
 8002984:	2101      	movs	r1, #1
 8002986:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002988:	e043      	b.n	8002a12 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800298a:	260f      	movs	r6, #15
 800298c:	19bb      	adds	r3, r7, r6
 800298e:	2208      	movs	r2, #8
 8002990:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002992:	200e      	movs	r0, #14
 8002994:	183b      	adds	r3, r7, r0
 8002996:	2208      	movs	r2, #8
 8002998:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	0e5b      	lsrs	r3, r3, #25
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	240d      	movs	r4, #13
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2107      	movs	r1, #7
 80029aa:	400a      	ands	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	0f5b      	lsrs	r3, r3, #29
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	250c      	movs	r5, #12
 80029ba:	197b      	adds	r3, r7, r5
 80029bc:	2107      	movs	r1, #7
 80029be:	400a      	ands	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80029c2:	183b      	adds	r3, r7, r0
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	197a      	adds	r2, r7, r5
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	4914      	ldr	r1, [pc, #80]	; (8002a1c <UARTEx_SetNbDataToProcess+0xb4>)
 80029cc:	5c8a      	ldrb	r2, [r1, r2]
 80029ce:	435a      	muls	r2, r3
 80029d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80029d2:	197b      	adds	r3, r7, r5
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <UARTEx_SetNbDataToProcess+0xb8>)
 80029d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80029da:	0019      	movs	r1, r3
 80029dc:	f7fd fc1c 	bl	8000218 <__divsi3>
 80029e0:	0003      	movs	r3, r0
 80029e2:	b299      	uxth	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	226a      	movs	r2, #106	; 0x6a
 80029e8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80029ea:	19bb      	adds	r3, r7, r6
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	193a      	adds	r2, r7, r4
 80029f0:	7812      	ldrb	r2, [r2, #0]
 80029f2:	490a      	ldr	r1, [pc, #40]	; (8002a1c <UARTEx_SetNbDataToProcess+0xb4>)
 80029f4:	5c8a      	ldrb	r2, [r1, r2]
 80029f6:	435a      	muls	r2, r3
 80029f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <UARTEx_SetNbDataToProcess+0xb8>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002a02:	0019      	movs	r1, r3
 8002a04:	f7fd fc08 	bl	8000218 <__divsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	b299      	uxth	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2268      	movs	r2, #104	; 0x68
 8002a10:	5299      	strh	r1, [r3, r2]
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b005      	add	sp, #20
 8002a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	08002b1c 	.word	0x08002b1c
 8002a20:	08002b24 	.word	0x08002b24

08002a24 <__libc_init_array>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	2600      	movs	r6, #0
 8002a28:	4d0c      	ldr	r5, [pc, #48]	; (8002a5c <__libc_init_array+0x38>)
 8002a2a:	4c0d      	ldr	r4, [pc, #52]	; (8002a60 <__libc_init_array+0x3c>)
 8002a2c:	1b64      	subs	r4, r4, r5
 8002a2e:	10a4      	asrs	r4, r4, #2
 8002a30:	42a6      	cmp	r6, r4
 8002a32:	d109      	bne.n	8002a48 <__libc_init_array+0x24>
 8002a34:	2600      	movs	r6, #0
 8002a36:	f000 f829 	bl	8002a8c <_init>
 8002a3a:	4d0a      	ldr	r5, [pc, #40]	; (8002a64 <__libc_init_array+0x40>)
 8002a3c:	4c0a      	ldr	r4, [pc, #40]	; (8002a68 <__libc_init_array+0x44>)
 8002a3e:	1b64      	subs	r4, r4, r5
 8002a40:	10a4      	asrs	r4, r4, #2
 8002a42:	42a6      	cmp	r6, r4
 8002a44:	d105      	bne.n	8002a52 <__libc_init_array+0x2e>
 8002a46:	bd70      	pop	{r4, r5, r6, pc}
 8002a48:	00b3      	lsls	r3, r6, #2
 8002a4a:	58eb      	ldr	r3, [r5, r3]
 8002a4c:	4798      	blx	r3
 8002a4e:	3601      	adds	r6, #1
 8002a50:	e7ee      	b.n	8002a30 <__libc_init_array+0xc>
 8002a52:	00b3      	lsls	r3, r6, #2
 8002a54:	58eb      	ldr	r3, [r5, r3]
 8002a56:	4798      	blx	r3
 8002a58:	3601      	adds	r6, #1
 8002a5a:	e7f2      	b.n	8002a42 <__libc_init_array+0x1e>
 8002a5c:	08002b34 	.word	0x08002b34
 8002a60:	08002b34 	.word	0x08002b34
 8002a64:	08002b34 	.word	0x08002b34
 8002a68:	08002b38 	.word	0x08002b38

08002a6c <memset>:
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	1882      	adds	r2, r0, r2
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d100      	bne.n	8002a76 <memset+0xa>
 8002a74:	4770      	bx	lr
 8002a76:	7019      	strb	r1, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	e7f9      	b.n	8002a70 <memset+0x4>

08002a7c <strcpy>:
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	780a      	ldrb	r2, [r1, #0]
 8002a80:	3101      	adds	r1, #1
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	2a00      	cmp	r2, #0
 8002a88:	d1f9      	bne.n	8002a7e <strcpy+0x2>
 8002a8a:	4770      	bx	lr

08002a8c <_init>:
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a92:	bc08      	pop	{r3}
 8002a94:	469e      	mov	lr, r3
 8002a96:	4770      	bx	lr

08002a98 <_fini>:
 8002a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9e:	bc08      	pop	{r3}
 8002aa0:	469e      	mov	lr, r3
 8002aa2:	4770      	bx	lr
